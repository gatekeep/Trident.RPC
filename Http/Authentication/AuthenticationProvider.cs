/*
 * Copyright (c) 2008-2020 Bryan Biedenkapp., All Rights Reserved.
 * MIT Open Source. Use is subject to license terms.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 */
/*
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including 
 * without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject 
 * to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN 
 * NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE 
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
//
// Based on code from the C# WebServer project. (http://webserver.codeplex.com/)
// Copyright (c) 2012 Jonas Gauffin
// Licensed under the Apache 2.0 License (http://opensource.org/licenses/Apache-2.0)
//

using System;
using System.Collections.Generic;

using TridentFramework.RPC.Http.Headers;

namespace TridentFramework.RPC.Http.Authentication
{
    /// <summary>
    /// Provides authentication in the web server.
    /// </summary>
    /// <remarks>
    /// To initiate authentication you just need to throw a Una
    /// </remarks>
    public class AuthenticationProvider
    {
        private readonly Dictionary<string, IAuthenticator> authenticators = new Dictionary<string, IAuthenticator>(StringComparer.OrdinalIgnoreCase);

        /*
        ** Methods
        */

        /// <summary>
        /// Add a authenticator.
        /// </summary>
        /// <param name="authenticator"></param>
        public void Add(IAuthenticator authenticator)
        {
            authenticators.Add(authenticator.Scheme, authenticator);
        }

        /// <summary>
        /// Authenticate request.
        /// </summary>
        /// <param name="request"></param>
        /// <returns></returns>
        /// <remarks>
        /// Requires that a <c>AuthorizationHeader</c> have been sent by the client. If not,
        /// request one by sending a WWW-Authentication header (can be generated by the Challenge method).
        /// </remarks>
        /// <exception cref="InvalidOperationException">Authorization header was not found in the request.</exception>
        /// <exception cref="NotSupportedException">Requested authentication scheme is not supported.</exception>
        public IAuthenticationUser Authenticate(IRequest request)
        {
            var authHeader = request.Headers[AuthorizationHeader.NAME] as AuthorizationHeader;
            if (authHeader == null)
                throw new InvalidOperationException(AuthorizationHeader.NAME + " header was not found in the request.");

            IAuthenticator authenticator;
            if (!authenticators.TryGetValue(authHeader.Scheme, out authenticator))
                throw new NotSupportedException(authHeader.Scheme + " is not supported (no authenticator was found).");

            return authenticator.Authenticate(authHeader, request.Uri.Host, request.Method.ToString().ToLower());
        }

        /// <summary>
        /// Create a challenge header (WWW-authenticate)
        /// </summary>
        /// <param name="response">Response that the authentication header should be added to</param>
        /// <param name="realm">Realm that the user should authenticate in</param>
        /// <returns>WWW-Authenticate header.</returns>
        /// <remarks>
        /// <para>
        /// Scheme can currently be <c>basic</c> or <c>digest</c>. Basic is not very safe, but easier to use.
        /// Digest is quite safe.
        /// </para><para>
        /// </para>
        /// </remarks>
        /// <exception cref="NotSupportedException">Requested scheme is not supported.</exception>
        public void CreateChallenge(IResponse response, string realm)
        {
            foreach (var authenticator in authenticators.Values)
            {
                var header = authenticator.CreateChallenge(realm);
                response.Add(header.Name, header);
            }
        }
    } // public class AuthenticationProvider
} // namespace TridentFramework.RPC.Http.Authentication
